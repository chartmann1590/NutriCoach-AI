name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install chromium

      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting
        run: |
          black --check .
          isort --check-only .

      - name: Run unit tests
        env:
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key
          WTF_CSRF_SECRET_KEY: test-csrf-secret
          DATABASE_URL: sqlite:///:memory:
          REDIS_URL: redis://localhost:6379/0
        run: |
          python -m pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Run integration tests
        env:
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key
          WTF_CSRF_SECRET_KEY: test-csrf-secret
          DATABASE_URL: sqlite:///:memory:
          REDIS_URL: redis://localhost:6379/0
        run: |
          python -m pytest tests/integration/ -v

      - name: Start application for E2E tests
        env:
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key
          WTF_CSRF_SECRET_KEY: test-csrf-secret
          DATABASE_URL: sqlite:///test_nutricoach.db
          REDIS_URL: redis://localhost:6379/1
        run: |
          python app.py &
          sleep 10
          curl -f http://localhost:5001/api/healthz

      - name: Run E2E tests
        env:
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key
          WTF_CSRF_SECRET_KEY: test-csrf-secret
          DATABASE_URL: sqlite:///test_nutricoach.db
          REDIS_URL: redis://localhost:6379/1
          BASE_URL: http://localhost:5001
        run: |
          python -m pytest tests/e2e/ -v --headed

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            htmlcov/
            pytest-results.xml
          retention-days: 30

  test-frontend:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.changed_files, 'nutrition_ai_mobile/')
    
    defaults:
      run:
        working-directory: nutrition_ai_mobile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Run Flutter analysis
        run: flutter analyze

      - name: Check formatting
        run: dart format --set-exit-if-changed .

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./nutrition_ai_mobile/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        uses: securecodewarrior/github-action-bandit-scan@v1.0.1
        with:
          exit_zero: true

      - name: Run Safety security scan
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results-${{ github.run_number }}
          path: |
            bandit-results.json
            safety-report.json
          retention-days: 30

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check for vulnerabilities in Python dependencies
        run: |
          pip install pip-audit
          pip-audit --format=json --output=python-audit.json || true

      - name: Check for outdated Python packages
        run: |
          pip install pip-check
          pip-check --format=json > python-outdated.json || true

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-results-${{ github.run_number }}
          path: |
            python-audit.json
            python-outdated.json
          retention-days: 30

  build-status:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, dependency-check]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.test-backend.result }}" == "failure" ] || 
             [ "${{ needs.test-frontend.result }}" == "failure" ] ||
             [ "${{ needs.security-scan.result }}" == "failure" ] ||
             [ "${{ needs.dependency-check.result }}" == "failure" ]; then
            echo "❌ Build failed!"
            exit 1
          else
            echo "✅ All checks passed!"
          fi

      - name: Create status comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              backend: '${{ needs.test-backend.result }}',
              frontend: '${{ needs.test-frontend.result }}',
              security: '${{ needs.security-scan.result }}',
              dependencies: '${{ needs.dependency-check.result }}'
            };
            
            const getIcon = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⚠️';
                case 'skipped': return '⏭️';
                default: return '⚪';
              }
            };
            
            const body = `## 🔄 CI/CD Pipeline Results
            
            | Check | Status | Result |
            |-------|---------|---------|
            | Backend Tests | ${getIcon(results.backend)} | ${results.backend} |
            | Frontend Tests | ${getIcon(results.frontend)} | ${results.frontend} |
            | Security Scan | ${getIcon(results.security)} | ${results.security} |
            | Dependency Check | ${getIcon(results.dependencies)} | ${results.dependencies} |
            
            **Workflow:** [\`${context.workflow}\`](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });